spring:

  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true

    defer-datasource-initialization: true




  h2:
    console:
      enabled: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            #인가코드를 받아 엑세스토큰 요청 떄 사용 즉 OAuth2LoginAuthenticationFilter에서 사용
            authorization-grant-type: authorization_code
            scope: # https://developers.kakao.com/docs/latest/ko/kakaologin/common#user-info
              - profile_nickname
              - account_email
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            client-name: Kakao
        provider:
          #Google, GitHub, Facebook, Okta는 CommonOAuth2Provider enum 에 미리 정의되어 있어서 필 x
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-info-authentication-method: header
            # 사용자 정보를 가져올 때 토큰을 보내는 방법 입니다 기본이 헤더
            user-name-attribute: id

jwt:
  issuer: ajufresh@gmaile.com
  secret_key: ${JWT_SECRET_KEY}
  #{OAUTH_CLIENT_ID}{OAUTH_CLIENT_SECRET}{JWT_SECRET_KEY}